[{"C:\\Users\\pshbl\\IdeaProjects\\crypto-el-gamal\\front\\crypro-app\\src\\App.js":"1","C:\\Users\\pshbl\\IdeaProjects\\crypto-el-gamal\\front\\crypro-app\\src\\index.js":"2"},{"size":11037,"mtime":1635962052761,"results":"3","hashOfConfig":"4"},{"size":274,"mtime":1616081641000,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"8"},"1jiwqng",{"filePath":"9","messages":"10","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\pshbl\\IdeaProjects\\crypto-el-gamal\\front\\crypro-app\\src\\App.js",["11","12"],"import {Button, Col, Container, Form, Row, Tab, Tabs} from \"react-bootstrap\";\nimport React, {useState, useRef} from 'react';\nimport SockJsClient from 'react-stomp';\nimport axios from \"axios\";\nimport bigInt from \"big-integer\";\n\nconst usernames = ['Maxim1', 'Maxim2'];\n\n\nfunction generateNewKey() {\n    const p = generateRandomPrime();\n    console.log(`[GENERATE KEY] p = ${p}`)\n    const g = bigInt(getPRoot(p));\n    console.log(`[GENERATE KEY] g = ${g}`)\n    const x = bigInt.randBetween(2, p - 1);\n    console.log(`[GENERATE KEY] x = ${x}`)\n    const y = g.modPow(x, p);\n    console.log(`[GENERATE KEY] y = ${y}`)\n\n    return {\n        p,\n        g,\n        x,\n        y\n    };\n}\n\nfunction encryptMsg(msg, openKey) {\n    if (msg > openKey.p) {\n        throw new Error(\"сообщение должно быть меньше p\")\n    }\n    console.log(`[Encrypt] Encrypt ${msg}, open-key ${openKey.toString()}`);\n    const sessionKey = bigInt.randBetween(2, openKey.p - 2);\n    const a = openKey.g.modPow(sessionKey, openKey.p);\n    const b = bigInt(msg).multiply(openKey.y.modPow(sessionKey, openKey.p)).mod(openKey.p);\n    console.log(`[Encrypt] Result encrypt a = ${a}, b = ${b}, sum = ${a * 10 + b}`);\n    return `${a}|${b}`;\n}\n\nfunction decryptMsg(msg, secretKey) {\n    const [aStr, bStr] = msg.split(/\\|/);\n    const a = bigInt(parseInt(aStr));\n    const b = bigInt(parseInt(bStr));\n    console.log(`[Decrypt] Decrypt a = ${a}, b = ${b}. key ${secretKey.toString()}`);\n    const result = b.multiply(a.pow(secretKey.p.minus(1).minus(secretKey.x))).mod(secretKey.p)\n    console.log(`[Decrypt] Decrypt result = ${result}`);\n    return result;\n}\n\nfunction getPRoot(p) {\n    for (let i = 0; i < p; i++) {\n        if (isPRoot(p, i)) {\n            console.log(\"root = \" + i)\n            return i;\n        }\n    }\n    return 0;\n}\n\nfunction isPRoot(p, root) {\n    if (root === 0 || root === 1) {\n        return false;\n    }\n    let last = 1;\n    const set = new Set();\n    for (let i = 0; i < p - 1; i++) {\n        last = (last * root) % p;\n        if (set.has(last)) {\n            return false;\n        }\n        set.add(last);\n    }\n    return true;\n}\n\nfunction generateRandomPrime() {\n    while (true) {\n        let random = bigInt.randBetween(10, 100);\n        if (random.isPrime()) {\n            return random;\n        }\n    }\n}\n\nfunction App() {\n    const [username, setUsername] = useState(usernames[0]);\n    const [usernameTo, setUsernameTo] = useState(usernames[1]);\n    const [message, setMessage] = useState('');\n    const [inMessage, setInMessage] = useState('');\n    const [inDecryptMessage, setInDecryptMessage] = useState('');\n    const [myKey, setMyKey] = useState({})\n    const [isConnected, setIsConnected] = useState(false)\n    const [openKey, setOpenKey] = useState({})\n    const clientRef = useRef();\n\n    const handleChangeMsg = (msg) => {\n        setMessage(encryptMsg(msg.target.value, openKey))\n    }\n\n    const handleSend = (event) => {\n        console.log(event)\n        const msg = {\n            username: usernameTo,\n            message: message\n        }\n        clientRef.current.sendMessage(\"/app/chat\", JSON.stringify(msg));\n    }\n\n    const handleShow = () => {\n        console.log(openKey)\n        console.log(myKey)\n    }\n\n    const handleCreateChat = () => {\n        let newSecretKey = generateNewKey();\n\n        const sendMsg = {\n            usernameTo: usernameTo,\n            usernameFrom: username,\n            p: newSecretKey.p,\n            g: newSecretKey.g,\n            y: newSecretKey.y,\n        }\n        axios.post(\"http://localhost:8080/api/create-chat\", sendMsg).then(r => setMyKey(newSecretKey))\n    }\n\n    const handleChangeUsername = () => {\n        const tmp = username;\n        setUsername(usernameTo)\n        setUsernameTo(tmp)\n    }\n\n    return (\n        <div>\n            <SockJsClient url='http://localhost:8080/ws' topics={['/user/' + username + '/messages' ]}\n                          onMessage={(msg) => {\n                              console.log(msg)\n                              console.log(\"chat\")\n                              const decryptMsg1 = decryptMsg(msg.message, myKey);\n                              console.log(decryptMsg1)\n                              setInMessage(msg.message)\n                              setInDecryptMessage(decryptMsg1.toString())\n                          }}\n                          ref={clientRef} />\n            <SockJsClient url='http://localhost:8080/ws' topics={['/user/' + username + '/create' ]}\n                          onMessage={(msg) => {\n                              console.log(\"create chat\")\n                              console.log(msg)\n                              let newSecretKey = generateNewKey();\n                              const sendMsg = {\n                                  usernameTo: msg.usernameTo,\n                                  usernameFrom: msg.usernameFrom,\n                                  p: newSecretKey.p,\n                                  g: newSecretKey.g,\n                                  y: newSecretKey.y,\n                              }\n                              console.log(sendMsg)\n                              axios.post(\"http://localhost:8080/api/create-chat/key\", sendMsg\n                              ).then(r => {\n                                  setMyKey(newSecretKey);\n                              });\n\n                              setOpenKey({\n                                  p: bigInt(msg.p),\n                                  g: bigInt(msg.g),\n                                  y: bigInt(msg.y),\n                              });\n                          }} />\n            <SockJsClient url='http://localhost:8080/ws' topics={['/user/' + username + '/key' ]}\n                          onMessage={(msg) => {\n                              console.log(\"key\")\n                              console.log(msg);\n                              setOpenKey({\n                                  p: bigInt(msg.p),\n                                  g: bigInt(msg.g),\n                                  y: bigInt(msg.y),\n                              });\n                          }} />\n            <Container fluid=\"md\" className=\"my-5\">\n                <Row className=\"mb-5\">\n                    <Col>\n                        <div>\n                            Hello, {username}\n                        </div>\n                        <Button\n                            variant=\"outline-primary\"\n                            size=\"sm\"\n                            onClick={handleChangeUsername}\n                            disabled={isConnected}\n                        >\n                            Изменить пользователя\n                        </Button>\n                    </Col>\n                </Row>\n                <Row className=\"mb-2 bg-light border p-3\" xs=\"auto\">\n                    <Col>\n                        <div className=\"mb-2 fw-bold\">Секретный (x) и открытый ключ (p, g, y) (мой)</div>\n                        <Row xs=\"auto\"><Col>x</Col><Col>{myKey.x?.toString()}</Col></Row>\n                        <Row xs=\"auto\"><Col>p</Col><Col>{myKey.p?.toString()}</Col></Row>\n                        <Row xs=\"auto\"><Col>g</Col><Col>{myKey.g?.toString()}</Col></Row>\n                        <Row xs=\"auto\"><Col>y</Col><Col>{myKey.y?.toString()}</Col></Row>\n                    </Col>\n                    <Col>\n                        <div className=\"mb-2 fw-bold\">Открытый ключ (p, g, y) (чужой)</div>\n                        <Row xs=\"auto\"><Col>p</Col><Col>{openKey.p?.toString()}</Col></Row>\n                        <Row xs=\"auto\"><Col>g</Col><Col>{openKey.g?.toString()}</Col></Row>\n                        <Row xs=\"auto\"><Col>y</Col><Col>{openKey.y?.toString()}</Col></Row>\n                    </Col>\n                </Row>\n                <Row className=\"mb-2\">\n                    <Button\n                        variant=\"primary\"\n                        onClick={handleCreateChat}\n                    >\n                        Соединить\n                    </Button>\n                </Row>\n                <Row className=\"mb-2\">\n                    <Tabs defaultActiveKey=\"send\" className=\"mb-3\">\n                        <Tab eventKey=\"send\" title=\"Отправить\">\n                            <Form>\n                                <Form.Group as={Row} className=\"mb-3\" controlId=\"formHorizontalCheck\">\n                                    <Col>\n                                        <Form.Control onChange={handleChangeMsg} type=\"number\"  placeholder=\"Сообщение\" />\n                                    </Col>\n                                </Form.Group>\n                                <Form.Group as={Row} className=\"mb-3\">\n                                    <Col sm={10}>\n                                        <Button type=\"button\" onClick={handleSend}>Отправить</Button>\n                                    </Col>\n                                </Form.Group>\n                            </Form>\n                            <hr />\n                            <Form.Group as={Row} className=\"mb-3\" controlId=\"formHorizontalCheck\">\n                                <Form.Label column sm=\"2\">\n                                    Результат шифрования с помощью чужого открытого ключа\n                                </Form.Label>\n                                <Col sm=\"10\">\n                                    <Form.Control type=\"text\" placeholder=\"Результат шифрования\" readOnly value={message}/>\n                                </Col>\n                            </Form.Group>\n                        </Tab>\n                        <Tab eventKey=\"exit\" title=\"Входящие\">\n                            <Form.Group as={Row} className=\"mb-2\" controlId=\"formHorizontalCheck\">\n                                <Form.Label column sm=\"2\">\n                                    Пришло сообщение\n                                </Form.Label>\n                                <Col sm=\"10\">\n                                    <Form.Control type=\"text\" readOnly value={inMessage}/>\n                                </Col>\n                            </Form.Group>\n                            <Form.Group as={Row} className=\"mb-2\" controlId=\"formHorizontalCheck\">\n                                <Form.Label column sm=\"2\">\n                                    Расшифрованное сообщение при помощи моего секретного ключа\n                                </Form.Label>\n                                <Col sm=\"10\">\n                                    <Form.Control type=\"text\" readOnly value={inDecryptMessage}/>\n                                </Col>\n                            </Form.Group>\n                        </Tab>\n                    </Tabs>\n                </Row>\n            </Container>\n        </div>\n    );\n}\n\nexport default App;\n","C:\\Users\\pshbl\\IdeaProjects\\crypto-el-gamal\\front\\crypro-app\\src\\index.js",[],{"ruleId":"13","severity":1,"message":"14","line":92,"column":25,"nodeType":"15","messageId":"16","endLine":92,"endColumn":39},{"ruleId":"13","severity":1,"message":"17","line":109,"column":11,"nodeType":"15","messageId":"16","endLine":109,"endColumn":21},"no-unused-vars","'setIsConnected' is assigned a value but never used.","Identifier","unusedVar","'handleShow' is assigned a value but never used."]